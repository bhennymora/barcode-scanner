{"version":3,"sources":["QuaggaBarcode.js","ScanditBarcode.js","App.js","index.js"],"names":["QuaggaBarcode","props","handleClick","bind","this","startScanner","Quagga","init","inputStream","name","type","target","document","querySelector","constraints","width","height","facingMode","decoder","readers","debug","showCanvas","showPatches","showFoundPatches","showSkeleton","showLabels","showPatchLabels","showRemainingPatchLabels","boxFromPatches","showTransformed","showTransformedBox","showBB","err","alert","console","log","innerHTML","start","onProcessed","result","drawingCtx","canvas","ctx","overlay","drawingCanvas","dom","boxes","clearRect","parseInt","getAttribute","filter","box","forEach","ImageDebug","drawPath","x","y","color","lineWidth","codeResult","code","line","onDetected","stop","value","style","display","id","onClick","React","Component","configurationPromise","configure","engineLocation","catch","error","position","top","bottom","left","right","margin","maxWidth","maxHeight","ScanditBarcode","ref","createRef","then","ScanditSDKBarcodePicker","create","current","barcodePicker","onScan","on","onError","destroy","prevProps","JSON","stringify","scanSettings","applyScanSettings","visible","setVisible","App","className","to","exact","path","playSoundOnScan","vibrateOnScan","scanningPaused","videoFit","accessCamera","ScanSettings","enabledSymbologies","codeDuplicateFilter","scanResult","getElementById","barcodes","reduce","string","barcode","Barcode","Symbology","toHumanizedName","symbology","data","message","ReactDOM","render"],"mappings":"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","file":"static/js/main.b898a236.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Quagga from \"quagga\"; // ES6\r\nimport \"./App.css\";\r\n\r\nvar _scannerIsRunning = false;\r\n\r\nclass QuaggaBarcode extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // This binding is necessary to make `this` work in the callback\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    if (_scannerIsRunning) {\r\n      Quagga.stop();\r\n    } else {\r\n      this.startScanner();\r\n    }\r\n  }\r\n\r\n  startScanner() {\r\n    Quagga.init(\r\n      {\r\n        inputStream: {\r\n          name: \"Live\",\r\n          type: \"LiveStream\",\r\n          target: document.querySelector(\"#scanner-container\"),\r\n          constraints: {\r\n            width: 480,\r\n            height: 320,\r\n            facingMode: \"environment\"\r\n          }\r\n        },\r\n        decoder: {\r\n          readers: [\r\n            \"code_128_reader\",\r\n            \"ean_reader\",\r\n            \"ean_8_reader\",\r\n            \"code_39_reader\",\r\n            \"code_39_vin_reader\",\r\n            \"codabar_reader\",\r\n            \"upc_reader\",\r\n            \"upc_e_reader\",\r\n            \"i2of5_reader\"\r\n          ],\r\n          debug: {\r\n            showCanvas: true,\r\n            showPatches: true,\r\n            showFoundPatches: true,\r\n            showSkeleton: true,\r\n            showLabels: true,\r\n            showPatchLabels: true,\r\n            showRemainingPatchLabels: true,\r\n            boxFromPatches: {\r\n              showTransformed: true,\r\n              showTransformedBox: true,\r\n              showBB: true\r\n            }\r\n          }\r\n        }\r\n      },\r\n      function(err) {\r\n        if (err) {\r\n          alert(\"You need a camera to scan barcodes.\");\r\n          console.log(err);\r\n          document.querySelector(\"#scanner-container\").innerHTML = \"\";\r\n\r\n          return;\r\n        }\r\n\r\n        console.log(\"Initialization finished. Ready to start\");\r\n        Quagga.start();\r\n\r\n        // Set flag to is running\r\n        //_scannerIsRunning = true;\r\n      }\r\n    );\r\n\r\n    Quagga.onProcessed(function(result) {\r\n      var drawingCtx = Quagga.canvas.ctx.overlay,\r\n        drawingCanvas = Quagga.canvas.dom.overlay;\r\n\r\n      if (result) {\r\n        if (result.boxes) {\r\n          drawingCtx.clearRect(\r\n            0,\r\n            0,\r\n            parseInt(drawingCanvas.getAttribute(\"width\")),\r\n            parseInt(drawingCanvas.getAttribute(\"height\"))\r\n          );\r\n          result.boxes\r\n            .filter(function(box) {\r\n              return box !== result.box;\r\n            })\r\n            .forEach(function(box) {\r\n              Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, {\r\n                color: \"green\",\r\n                lineWidth: 2\r\n              });\r\n            });\r\n        }\r\n\r\n        if (result.box) {\r\n          Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, {\r\n            color: \"#00F\",\r\n            lineWidth: 2\r\n          });\r\n        }\r\n\r\n        if (result.codeResult && result.codeResult.code) {\r\n          Quagga.ImageDebug.drawPath(\r\n            result.line,\r\n            { x: \"x\", y: \"y\" },\r\n            drawingCtx,\r\n            { color: \"red\", lineWidth: 3 }\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    Quagga.onDetected(function(result) {\r\n      Quagga.stop();\r\n      document.querySelector(\"#text-input\").value = result.codeResult.code;\r\n      document.querySelector(\"#scanner-container\").innerHTML = \"\";\r\n      console.log(\r\n        \"Barcode detected and processed : [\" + result.codeResult.code + \"]\",\r\n        result\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ display: \"inline-block\" }}>\r\n        <input type=\"text\" id=\"text-input\" />\r\n        <button onClick={this.handleClick}> Scan </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuaggaBarcode;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { configure, BarcodePicker as ScanditSDKBarcodePicker } from \"scandit-sdk\";\r\n\r\n// Configure the library and activate it with a license key\r\nconst configurationPromise = configure(\r\n  \"AWjQHT4GH1suKd4clyAclO0HPe0zPEMNQBB20fxsIk7baoYMsHam4lxsHDGpEoN1T0/mhss6DKBqZMA5NnjqsidTkPNmSbb+liwhwaBYLkp4SG+2SHNiEGRcJdzfFP/3XkMOfR1EfCxZImk3G41w+8SvHajjBAyYFNTb5TCiFqpiInRTB/VYVVe7THOSqHQB2oWBLr9ibi7kelTmaEjUSXhbetIpH5wtMrPSYgVr/gNPqsG6gg+eqDXcW/wcM5Ugcgv3TZm8+l2vnoH0f3mQkNAx4Mefg0oPL6Xjb4TuUFBOgLsB9zMKAMHizNncKm7csnMvI6VzFCLKC5MhaGIZKXLKq6F2N7RacQj2/7q575IeiCY2gMnB23vpdYWbN1boHM6SNXEJYhBonYCUNX3uv4DTPByg6pFqt5b8CAJWn5av+1AEmh5xrcOp4vinwAv2CNbH3couL7R10y4sktkHsy7TlRV438EIKwdd9Dvv9sKnFbPoz5YjaAsLmbf7ihJq0LK0UXlKucRfQGgLSDfiBZbDsxqQIE3F3uvd7ZqWU6amWWSHV0KqULDq0Q3KCuBXew8dB5FfkcrZXCoQttJGTjN9P9nmKS2rZlrduEracHbBEFOqLwUQA71fPki14TEOJ9NfT3NDuhU95uoSVGh59JpRPiht8kwcUpY4UsvBWy1nyAgrXEOxhrsTbNWQn+QP7PRrqwVM80LIOtOF7gFOz0QyflplhlVVI2M+wMbS7Co6ApMrQgdRLMJEb3KTbTObd1GBZQD0Jcao8xgg5UJVjHUqcPnROEBXVd+WWJYA9GYq+0hNAkCPA5ThXf0=\"\r\n  ,{\r\n    engineLocation: \"https://cdn.jsdelivr.net/npm/scandit-sdk@5.x/build\",\r\n  }\r\n).catch((error) => {\r\n  alert(error);\r\n});\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"0\",\r\n  bottom: \"0\",\r\n  left: \"0\",\r\n  right: \"0\",\r\n  margin: \"auto\",\r\n  maxWidth: \"480px\",\r\n  maxHeight: \"320px\",\r\n};\r\n\r\nclass ScanditBarcode extends Component {\r\n  static propTypes = {\r\n    visible: PropTypes.bool,\r\n    playSoundOnScan: PropTypes.bool,\r\n    vibrateOnScan: PropTypes.bool,\r\n    scanningPaused: PropTypes.bool,\r\n    guiStyle: PropTypes.string,\r\n    videoFit: PropTypes.string = 'COVER',\r\n    scanSettings: PropTypes.object,\r\n    enableCameraSwitcher: PropTypes.bool,\r\n    enableTorchToggle: PropTypes.bool,\r\n    enableTapToFocus: PropTypes.bool,\r\n    enablePinchToZoom: PropTypes.bool,\r\n    accessCamera: PropTypes.bool,\r\n    camera: PropTypes.object,\r\n    cameraSettings: PropTypes.object,\r\n    targetScanningFPS: PropTypes.number,\r\n    onScan: PropTypes.func,\r\n    onError: PropTypes.func,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.ref = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    configurationPromise.then(() => {\r\n      ScanditSDKBarcodePicker.create(this.ref.current, this.props).then((barcodePicker) => {\r\n        this.barcodePicker = barcodePicker;\r\n        if (this.props.onScan != null) {\r\n          barcodePicker.on(\"scan\", this.props.onScan);\r\n        }\r\n        if (this.props.onError != null) {\r\n          barcodePicker.on(\"scanError\", this.props.onError);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.barcodePicker != null) {\r\n      this.barcodePicker.destroy();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // These are just some examples of how to react to some possible property changes\r\n\r\n    if (JSON.stringify(prevProps.scanSettings) !== JSON.stringify(this.props.scanSettings)) {\r\n      this.barcodePicker.applyScanSettings(this.props.scanSettings);\r\n    }\r\n\r\n    if (prevProps.visible !== this.props.visible) {\r\n      this.barcodePicker.setVisible(this.props.visible);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div ref={this.ref} style={style} />;\r\n  }\r\n}\r\n\r\nexport default ScanditBarcode;","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { ScanSettings, Barcode } from \"scandit-sdk\";\nimport QuaggaBarcode from \"./QuaggaBarcode\";\nimport ScanditBarcode from \"./ScanditBarcode\"\nimport './App.css';\n\nexport default function App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/quagga\">Quagga Barcode</Link>\n            </li>\n            <li>\n              <Link to=\"/scandit\">Scandit Barcode</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route exact path=\"/quagga\">\n            <div id=\"scanner-container\" />\n            <div>\n              <p style={{ display: \"inline-block\" }}>Barcode: </p>\n              <QuaggaBarcode style={{ display: \"inline-block\" }} />\n\t\t\t      </div>\n          </Route>\n          <Route exact path=\"/scandit\">\n            <div id=\"scandit-barcode-result\" />\n            <ScanditBarcode \n              playSoundOnScan={true}\n              vibrateOnScan={true}\n              scanningPaused={false}\n              videoFit={false}\n              accessCamera={true}\n              scanSettings={\n                new ScanSettings({\n                  enabledSymbologies: [\"qr\", \"ean8\", \"ean13\", \"upca\", \"upce\", \"code128\", \"code39\", \"code93\", \"itf\"],\n                  codeDuplicateFilter: 1000\n                })\n              }\n              onScan={scanResult => {\n                document.getElementById(\"scandit-barcode-result\").innerHTML = scanResult.barcodes.reduce(function(\n                  string,\n                  barcode\n                ) {\n                  return string + Barcode.Symbology.toHumanizedName(barcode.symbology) + \": \" + barcode.data + \"<br>\";\n                },\n                \"\");\n              }}\n              onError={error => {\n                console.error(error.message);\n              }}\n            />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />\n  ,document.getElementById('root')\n);\n"],"sourceRoot":""}